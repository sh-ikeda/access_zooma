package main

import (
	"fmt"
	"io/ioutil"
	"io"
	"os"
	"bufio"
	"net/http"
	"flag"
	"sync"
	"time"
)

func get_bs_json(url string, i int, isFin chan interface{}, wg *sync.WaitGroup) {
	defer wg.Done()
	resp, err := http.Get(url)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	bytes, _ := ioutil.ReadAll(resp.Body)
	output := string(bytes)
	if i != 1 {
		//fmt.Fprintln(os.Stdout, ",")
		output = ",\n" + output
	}
	fmt.Fprint(os.Stdout, output)

	resp.Body.Close()
	<-isFin
}

func main() {
	nroutine := flag.Int("n", 1, "# of routine")
	// if len(os.Args) == 1 {
	// 	fmt.Fprintf(os.Stderr, "usage: %s bsid_list\n", os.Args[0])
	// 	os.Exit(1)
	// }

	//fp, err := os.Open(os.Args[1])
	flag.Parse()
	fp, err := os.Open(flag.Arg(0))
	if err != nil {
		fmt.Fprintln(os.Stderr, err, "\n", flag.Arg(0))
		os.Exit(1)
	}
	defer fp.Close()

	fmt.Fprintf(os.Stderr, "[%s] Accessing EBI BioSamples API with %d threads...\n", time.Now().Format("2006-01-02 15:04:05"), *nroutine)

	reader := bufio.NewReaderSize(fp, 64)
	wg := new(sync.WaitGroup)
	isFin := make(chan interface{}, *nroutine)
	base := "https://www.ebi.ac.uk/biosamples/samples/"

	fmt.Fprintln(os.Stdout, "[")
	for i := 1; ; i++ {
		id, _, err := reader.ReadLine()
		if err == io.EOF {
			break
		} else if err != nil {
			fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		}

		wg.Add(1)
		isFin <- struct{}{}
		if i == 1 {
			get_bs_json(base + string(id), i, isFin, wg)
		} else {
			go get_bs_json(base + string(id), i, isFin, wg)
		}
		if i % 1000 == 0 {
			fmt.Fprintf(os.Stderr, "[%s] Sent %d queries.\n", time.Now().Format("2006-01-02 15:04:05"), i)
		}
	}
	wg.Wait()
	fmt.Fprintln(os.Stdout, "]")

	fmt.Fprintf(os.Stderr, "[%s] Done.\n", time.Now().Format("2006-01-02 15:04:05"))

}
